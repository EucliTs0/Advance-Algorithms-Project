dynamic programming faster method solving problems make use optimal substructure overlapping subproblems memoization it relationship computer programming instead process finding satisfactory algorithm

optimal substructure process using optional solutions sub problems find optimal solution overall problem when sub problem solutions used solve various bigger problems said overlappingsub problems memoization used order save time solutions stored rather recomputed a solution disposed positive longer required cases solution future problem computed advance

there two main approaches dynamic programming the first bottom approach although always simple find them required sub problems solved advance used create solutions larger problems the method top approach method combines memorization recursion the main problem divided sub problems solved stored future use
